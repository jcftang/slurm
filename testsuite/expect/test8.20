#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Bluegene/Q only: Test packing of job steps within a job allocation
#
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2011 SchedMD LLC
# Written by Morris Jette <jette@schedmd.gov>
#
# This file is part of SLURM, a resource management program.
# For details, see <http://www.schedmd.com/slurmdocs/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id          "8.20"
set exit_code        0
set job_id           0

print_header $test_id

if {([test_bluegene] == 0) || [string compare [get_bluegene_type] "Q"]} {
	send_user "\nWARNING: This test is only compatable with Bluegene/Q systems\n"
	exit $exit_code
}

#
# Spawn a job via salloc
#
set matches 0
set timeout $max_job_delay
set salloc_pid [spawn $salloc -N32 -t1 $bin_bash]
expect {
	-re "Granted job allocation ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re $prompt {
		#send_user "Job initiated\n"
	}
	timeout {
		send_user "\nFAILURE: salloc not responding\n"
		if {$job_id != 0} {
			cancel_job $job_id
		}
		slow_kill [expr 0 - $salloc_pid]
		exit 1
	}
	eof {
		wait
	}
}

if {$job_id == 0} {
	send_user "\nFAILURE: did not get job_id\n"
	exit 1
}

#
# Determine the job's allocation dimensions
#
set timeout 5
set start1 -1
send "$scontrol show job $job_id\r"
expect {
	-re "BP_List=($alpha_numeric).($digit)($digit)($digit)($digit)($digit)x($digit)($digit)($digit)($digit)($digit)" {
		set prefix $expect_out(1,string)
		set start1 $expect_out(2,string)
		set start2 $expect_out(3,string)
		set start3 $expect_out(4,string)
		set start4 $expect_out(5,string)
		set start5 $expect_out(6,string)
		set fini1 $expect_out(7,string)
		set fini2 $expect_out(8,string)
		set fini3 $expect_out(9,string)
		set fini4 $expect_out(10,string)
		set fini5 $expect_out(11,string)
		exp_continue
	}
	-re $prompt {
		send "exit\r"
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		cancel_job $job_id
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$start1 == -1} {
	send_user "\nFAILURE: did not get job dimensions\n"
	cancel_job $job_id
	exit 1
}
send_user "\nprefix:$prefix\n"
send_user "dim 1:$start1 to $fini1  "
send_user "dim 2:$start2 to $fini2  "
send_user "dim 3:$start3 to $fini3  "
send_user "dim 4:$start4 to $fini4  "
send_user "dim 5:$start5 to $fini5\n"

set dim1 [expr $fini1 - $start1 + 1]
set dim2 [expr $fini2 - $start2 + 1]
set dim3 [expr $fini3 - $start3 + 1]
set dim4 [expr $fini4 - $start4 + 1]
set dim5 [expr $fini5 - $start5 + 1]
cancel_job $job_id

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
